package ca.sfu.cs.factorbase.database;

import java.util.List;

import ca.sfu.cs.factorbase.exception.DataBaseException;
import ca.sfu.cs.factorbase.graph.Edge;

/**
 * Methods expected to be implemented to enable the extraction of data from a database for FactorBase.
 */
public interface FactorBaseDataBase {
    /**
     * This method should setup all the extra tables required for FactorBase to learn a Bayesian
     * network for the provided database.
     *
     * @throws DataBaseException if an error occurs when attempting to access the database.
     */
    void setupDatabase() throws DataBaseException;


    /**
     * This method should cleanup any content (e.g. databases/tables) that are generated by the other
     * methods of this interface and are no longer needed after FactorBase has finished running.
     *
     * @throws DataBaseException if an error occurs when attempting to access the database.
     */
    void cleanupDatabase() throws DataBaseException;


    /**
     * Retrieve all the edges that are not allowed for the given rnode IDs.
     *
     * @param rnodeIDs - a list of the rnode IDs to get the forbidden edges for.
     * @return a List of the edges that are forbidden for the given rnode IDs.
     *
     * @throws DataBaseException if an error occurs when attempting to retrieve the information.
     */
    List<Edge> getForbiddenEdges(List<String> rnodeIDs) throws DataBaseException;


    /**
     * Retrieve all the edges that are required for the given rnode IDs.
     *
     * @param rnodeIDs - a list of the rnode IDs to get the required edges for.
     * @return a List of the edges that are required for the given rnode IDs.
     *
     * @throws DataBaseException if an error occurs when attempting to retrieve the information.
     */
    List<Edge> getRequiredEdges(List<String> rnodeIDs) throws DataBaseException;
}