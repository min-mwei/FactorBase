package ca.sfu.cs.factorbase.database;

import java.util.List;

import ca.sfu.cs.factorbase.data.DataExtractor;
import ca.sfu.cs.factorbase.exception.DataBaseException;
import ca.sfu.cs.factorbase.exception.DataExtractionException;
import ca.sfu.cs.factorbase.graph.Edge;

/**
 * Methods expected to be implemented to enable the extraction of data from a database for FactorBase.
 */
public interface FactorBaseDataBase {
    /**
     * This method should setup all the extra databases/tables required for FactorBase to learn a
     * Bayesian network for the provided database.
     *
     * @throws DataBaseException if an error occurs when attempting to access the database.
     */
    void setupDatabase() throws DataBaseException;


    /**
     * This method should cleanup any content (e.g. databases/tables) that are generated by the other
     * methods of this interface and are no longer needed after FactorBase has finished running.
     *
     * @throws DataBaseException if an error occurs when attempting to access the database.
     */
    void cleanupDatabase() throws DataBaseException;


    /**
     * Retrieve all the PVariables for the database that FactorBase is trying to learn a Bayesian network for.
     *
     * @return the PVariables for the database that FactorBase is trying to learn a Bayesian network for.
     *
     * @throws DataBaseException if an error occurs when attempting to access the database.
     */
    String[] getPVariables() throws DataBaseException;


    /**
     * Retrieve all the edges that are not allowed for the given rnode IDs.
     *
     * @param rnodeIDs - a list of the rnode IDs to get the forbidden edges for.
     * @return a List of the edges that are forbidden for the given rnode IDs.
     *
     * @throws DataBaseException if an error occurs when attempting to retrieve the information.
     */
    List<Edge> getForbiddenEdges(List<String> rnodeIDs) throws DataBaseException;


    /**
     * Retrieve all the edges that are required for the given rnode IDs.
     *
     * @param rnodeIDs - a list of the rnode IDs to get the required edges for.
     * @return a List of the edges that are required for the given rnode IDs.
     *
     * @throws DataBaseException if an error occurs when attempting to retrieve the information.
     */
    List<Edge> getRequiredEdges(List<String> rnodeIDs) throws DataBaseException;


    /**
     * Retrieve the CT table {@code DataExtractor} for the given RNode/PVar ID.
     *
     * Note: The {@code DataExtractor} for the given RNode/PVar ID should only be retrievable once and any references
     *       to it in the FactorBaseDataBase implementation should be removed.
     *
     * @param dataExtractorID - the RNode/PVar ID that we want to retrieve the {@code DataExtractor} for.
     * @return the CT table DataExtractor for the given RNode/PVar ID.
     *
     * @throws DataExtractionException if a non database error occurs when retrieving the DataExtractor.
     * @throws DataBaseException if a database error occurs when retrieving the DataExtractor.
     */
    DataExtractor getAndRemoveCTDataExtractor(String dataExtractorID) throws DataBaseException, DataExtractionException;
}